#                                                                       Modules
# =============================================================================

# abaqus
from abaqus import *
from abaqusConstants import *
from caeModules import *

#                                                          Authorship & Credits
# =============================================================================
__author__ = "Jiaxiang Yi (J.Yi@tudelft.nl)"
__credits__ = ["Jiaxiang Yi"]
__status__ = "Stable"
# =============================================================================
#
# =============================================================================


class AbaqusMaterialLib:
    def __init__(self, name_mat, model, part, name_set):
        """Initialization

        Parameters
        ----------
        name_mat : str
            name of material
        model : abaqus model
            abaqus model
        part : abaqus part
            abaqus part
        name_set : str
            name of the set
        """
        self.model = model
        self.part = part
        self.name_mat = name_mat
        self.name_set = name_set

    def CreateElasticMaterial(self, E, v):
        """create elastic material property

        Parameters
        ----------
        E : float
            young;s modulus
        v : float
            poission ratio

        Returns
        -------
        abaqus material
            abaqus material
        """
        material = self.model.Material(name=self.name_mat)
        material.Elastic(table=((E, v),))
        self.model.HomogeneousSolidSection(
            name=self.name_mat, material=self.name_mat, thickness=None
        )
        self.part.SectionAssignment(
            region=self.part.sets[self.name_set],
            sectionName=self.name_mat,
            offset=0.0,
            offsetType=MIDDLE_SURFACE,
            offsetField="",
            thicknessAssignment=FROM_SECTION,
        )

        return material

    def CreateVonMisesPlasticMaterial(self, E, v, yield_criterion):
        """create von mises plastic material

        Parameters
        ----------
        E : float
            young's modulus
        v : float
            poission ratio
        yield_criterion : list
            a table for generated by yield function
        """
        material = self.model.Material(name=self.name_mat)
        material.Elastic(table=((E, v),))
        material.Plastic(table=(yield_criterion))
        self.model.HomogeneousSolidSection(
            name=self.name_mat, material=self.name_mat, thickness=None
        )
        self.part.SectionAssignment(
            region=self.part.sets[self.name_set],
            sectionName=self.name_mat,
            offset=0.0,
            offsetType=MIDDLE_SURFACE,
            offsetField="",
            thicknessAssignment=FROM_SECTION,
        )
        return material

    def CreateUserMaterialMirkhalafModel(self, density, num_stv, para):
        """define the mirkhalaf model

        Parameters
        ----------
        density : float
            material density
        num_stv : int
            name of state variable
        para : list
            a table for parameters that control the material model
        """

        material = self.model.Material(name=self.name_mat)
        material.Density(table=((density,),))
        material.Depvar(n=num_stv)
        material.UserMaterial(
            mechanicalConstants=(
                para[0],
                para[1],
                para[2],
                para[3],
                para[4],
                para[5],
                para[6],
                para[7],
                para[8],
                para[9],
                para[10],
            )
        )
        self.model.HomogeneousSolidSection(
            name=self.name_mat, material=self.name_mat, thickness=None
        )
        self.part.SectionAssignment(
            region=self.part.sets[self.name_set],
            sectionName=self.name_mat,
            offset=0.0,
            offsetType=MIDDLE_SURFACE,
            offsetField="",
            thicknessAssignment=FROM_SECTION,
        )
        return material

    def CreateUserMaterialLeonovModel(self, density, num_stv, para):
        """define the mirkhalaf model

        Parameters
        ----------
        density : float
            material density
        num_stv : int
            name of state variable
        para : list
            a table for parameters that control the material model
        """

        material = self.model.Material(name=self.name_mat)
        material.Density(table=((density,),))
        material.Depvar(n=num_stv)
        material.UserMaterial(
            mechanicalConstants=(
                para[0],
                para[1],
                para[2],
                para[3],
                para[4],
                para[5],
                para[6],
                para[7],
                para[8],
                para[9],
                para[10],
                para[11],
                para[12],
                para[13],
            )
        )
        self.model.HomogeneousSolidSection(
            name=self.name_mat, material=self.name_mat, thickness=None
        )
        self.part.SectionAssignment(
            region=self.part.sets[self.name_set],
            sectionName=self.name_mat,
            offset=0.0,
            offsetType=MIDDLE_SURFACE,
            offsetField="",
            thicknessAssignment=FROM_SECTION,
        )

        return material
